name: Build, Push to Docker Hub & AWS ECR, Deploy to All ECS Services

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: asyiqan/np-snatch
  AWS_REGION: us-east-1
  AWS_ECR_REPO: 024196846829.dkr.ecr.us-east-1.amazonaws.com/asyiq-an/np-snatch
  ECS_CLUSTER: alert-koala-5ffh6c
  ECS_TASK_DEFINITION: npsnatch
  CONTAINER_NAME: npsnatch

permissions:
  contents: read

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout
      - name: Checkout code
        uses: actions/checkout@v4

      # Login to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID2 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY2 }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN2 }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to AWS ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push to both registries
      - name: Build and push Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build image
          docker build -f dockerfile/Dockerfile -t $IMAGE_NAME:latest .
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG

          # Push to Docker Hub
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$IMAGE_TAG

          # Tag for ECR
          docker tag $IMAGE_NAME:latest $AWS_ECR_REPO:latest
          docker tag $IMAGE_NAME:latest $AWS_ECR_REPO:$IMAGE_TAG

          # Push to ECR
          docker push $AWS_ECR_REPO:latest
          docker push $AWS_ECR_REPO:$IMAGE_TAG

      - name: Deploy new image to all ECS services in cluster
        env:
          NEW_IMAGE: ${{ env.AWS_ECR_REPO }}:${{ github.sha }}
        run: |
          SERVICES=$(aws ecs list-services --cluster $ECS_CLUSTER --query 'serviceArns[]' --output text)

          for SERVICE_ARN in $SERVICES; do
            SERVICE_NAME=$(basename $SERVICE_ARN)
            echo "Deploying new image to service: $SERVICE_NAME"

            CURRENT_TASK_DEF=$(aws ecs describe-services \
              --cluster $ECS_CLUSTER \
              --services $SERVICE_NAME \
              --query 'services[0].taskDefinition' \
              --output text)

            NEW_TASK_DEF=$(aws ecs describe-task-definition \
              --task-definition $CURRENT_TASK_DEF \
              --query 'taskDefinition' \
              --output json | \
              jq 'del(
                .taskDefinitionArn,
                .revision,
                .status,
                .requiresAttributes,
                .compatibilities,
                .registeredAt,
                .registeredBy
              ) | .containerDefinitions |= map(
                if .name == "'"$CONTAINER_NAME"'" then .image = "'"$NEW_IMAGE"'" else . end
              )' | \
              aws ecs register-task-definition --cli-input-json file:///dev/stdin \
              --query 'taskDefinition.taskDefinitionArn' --output text)

            aws ecs update-service \
              --cluster $ECS_CLUSTER \
              --service $SERVICE_NAME \
              --task-definition $NEW_TASK_DEF \
              --force-new-deployment

            echo "âœ… Updated service $SERVICE_NAME with image $NEW_IMAGE"
          done

